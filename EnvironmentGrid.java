//--------------------------------------------------------
//Code generated by Papyrus Java
//--------------------------------------------------------

package ROBOSEARCH;

import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

import ROBOSEARCH.Coordinate;

public class EnvironmentGrid {

	/**
	 * 
	 */
	private int enviroWidth;
	/**
	 * 
	 */
	private int enviroHeight;
	/**
	 * 
	 */
	private Coordinate[] coordinates;
	private ArrayList<Coordinate> coordinatesList = new ArrayList<Coordinate>();
	private List<Coordinate> pathOne = new ArrayList<Coordinate>();
	private List<Coordinate> pathTwo = new ArrayList<Coordinate>();


	public EnvironmentGrid(int enviroWidth, int enviroHeight) {
		
		this.enviroWidth = enviroWidth;
		this.enviroHeight = enviroHeight;
		
		
		this.calculateGrid();
		this.calculatePathOne();
		this.calculatePathTwo();
		
		//this.printGrid();
		
	}
	
	/**
	 * 
	 */
	private void calculateGrid() {		
		int startRow = enviroHeight/2 - enviroHeight;
		int endRow = enviroHeight - enviroHeight/2;
		
		int startColumn = startRow;
		int endColumn = endRow;
		
		for(int i = startRow; i <= endRow; i++){			
			
			for(int j = startColumn; j <= endColumn; j++) {			
				Coordinate c = new Coordinate(i, j);
				this.coordinatesList.add(c);
				
			}
		}
	}
	
	private void calculatePathOne(){
		boolean reverse = false;
		int startRow = enviroHeight/2 - enviroHeight;
		int endRow = enviroHeight - enviroHeight/2;
		
		int startColumn = startRow;
		int endColumn = endRow;
		
		for(int i = startRow; i <= endRow; i++){			
			if(!reverse){
				for(int j = startColumn; j <= endColumn; j++) {	
					if(i == 2 && j == 2){
						continue;
					}
					else if(i == -2 && j == 2){
						continue;

					}
					else if(i == 2 && j == -2){
						continue;

					}
					else if(i == -2 && j == -2){
						continue;

					}else{
						Coordinate c = new Coordinate(i, j);
						this.pathOne.add(c);						
					}
					
				}
				reverse = true;
			}
			else{
				for(int k = endColumn; k >= startColumn; k--) {	
					if(i == 2 && k == 2){
						continue;
					}
					else if(i == -2 && k == 2){
						continue;

					}
					else if(i == 2 && k == -2){
						continue;

					}
					else if(i == -2 && k == -2){
						continue;
					}else{
						Coordinate c = new Coordinate(i, k);
						this.pathOne.add(c);						
					}
					
				}
				reverse = false;
			}
			
		}
	}
	
	private void calculatePathTwo(){
		boolean reverse = false;
		int startRow = enviroHeight/2 - enviroHeight;
		int endRow = enviroHeight - enviroHeight/2;
		
		int startColumn = startRow;
		int endColumn = endRow;
		
		for(int i = endRow; i >= startRow; i--){			
			if(!reverse){
				for(int k = endColumn; k >= startColumn; k--) {
					if(i == 2 && k == 2){
						continue;
					}
					else if(i == -2 && k == 2){
						continue;

					}
					else if(i == 2 && k == -2){
						continue;

					}
					else if(i == -2 && k == -2){
						continue;
					}else{
						Coordinate c = new Coordinate(i, k);
						this.pathTwo.add(c);
					}
					
				}
				
				reverse = true;
			}
			else{
				for(int j = startColumn; j <= endColumn; j++) {	
					if(i == 2 && j == 2){
						continue;
					}
					else if(i == -2 && j == 2){
						continue;

					}
					else if(i == 2 && j == -2){
						continue;

					}
					else if(i == -2 && j == -2){
						continue;
					}else{
						Coordinate c = new Coordinate(i, j);
						this.pathTwo.add(c);
					}
					
					
				}
				reverse = false;
			}
			
		}
	}

	/**
	 * 
	 * @return 
	 */
	public Coordinate[] getGrid() {
		return coordinates;
	}
	
	public ArrayList<Coordinate> getGridList(){
		return this.coordinatesList;
	}
	
	public List<Coordinate> getPathOne(){
		return this.pathOne;
	}
	
	public List<Coordinate> getPathTwo(){
		return this.pathTwo;
	}

	/**
	 * 
	 */
	private void printGrid() {
		ListIterator<Coordinate> it = this.coordinatesList.listIterator();
		while(it.hasNext()){
			if(it.nextIndex() % (this.enviroWidth + 1) == 0){
				System.out.println(" ");
			}
			it.next().printCoordinate();
			System.out.print(" ");
		}
	}
};