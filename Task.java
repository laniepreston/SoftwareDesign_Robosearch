// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package ROBOSEARCH;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

import ROBOSEARCH.Coordinate;


public class Task {
	
	/**
	 * the color that the rover is searching for
	 */
	private Color searchColor;
	/**
	 * list of all the blocks that have been found
	 */
	private List<Coordinate> foundBlocks;
	/**
	 * total number of blocks that have been found 
	 */
	private int numFound;
	
	/**
	 * path to be followed
	 */
	private List<Coordinate> path;
	/**
	 * 
	 */
	private Coordinate startPosition;
	/**
	 * 
	 */
	private Coordinate endPosition;
	/**
	 * 
	 */
	private orientation startOrientation;
	/**
	 * 
	 * @param searchColor 
	 * @param path 
	 * @param startPosition
	 * @param startOrientation
	 */
	public Task(Color searchColor, List<Coordinate> path, Coordinate startPosition, orientation startOrientation) {
		this.searchColor = searchColor;
		this.path = path;
		this.startOrientation = startOrientation;
		this.startPosition = startPosition;
		// constraint: a maximum of 100 coordinates can be found
		this.foundBlocks = new ArrayList<Coordinate>();
		this.numFound = 0;
		// the opposite coordinate of the startPosition, therefore multiply by -1
		// this assumes that the rover starts in a corner
		this.endPosition = new Coordinate(startPosition.getLatitude(), startPosition.getLongitude());
	}

	/**
	 * add block to array if it has not been found before
	 * @param block     
	 */
	public void addFoundBlock(Coordinate block) {
		//meanwhile check if the block hasnt been found yet
		boolean upload = true;
		for (int i = 0; i < numFound; i++){
			if (block.getLatitude() == foundBlocks.get(i).getLatitude() && block.getLongitude() == foundBlocks.get(i).getLongitude()){
				upload = false;
				break;
			}
		}
		if (upload){
			foundBlocks.add(block);
			numFound++;
			System.out.println("found block is updated");
		}
	}

	/**
	 * 
	 * @return 
	 */
	public Color getSearchColor() {
		return this.searchColor;
	}
	
	/**
	 * 
	 * @return 
	 */
	public List<Coordinate> getPath(){
		return this.path;
	}
	/**
	 * 
	 * @return 
	 */
	public orientation getStartOrientation(){
		return this.startOrientation;
	}
	/**
	 * 
	 * @return 
	 */
	public Coordinate getStartPosition(){
		return this.startPosition;
	}
	/**
	 * 
	 * @return 
	 */
	public Coordinate getEndPosition(){
		return this.endPosition;
	};
	/**
	 * 
	 * @return 
	 */
	public boolean isFinished(){
		ListIterator<Coordinate> iterator = this.path.listIterator();
		
		while(iterator.hasNext()){
			Coordinate current = iterator.next();
			if(!current.getCoordinateHasBeenVisited()){
				//System.out.println("coordinate (" + current.getLatitude() + "," + current.getLongitude() + ") has not been visited yet");
				return false;
			}
		}
		return true;
	}
	

};